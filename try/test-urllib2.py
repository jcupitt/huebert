#!/usr/bin/python

import urllib2
import json
import time
import logging
import random

# track the detailed part of the last error generated by a subsystem here
# we present it with a summary during error messages
last_detail = ""

class Error(Exception):

    def __init__(self, message, detail=None):
        global last_detail

        self.message = message
        if detail:
            self.detail = detail
        else:
            self.detail = last_detail

        logging.debug('controller: Error %s %s', self.message, self.detail)

    def __str__(self):
        return '%s - %s' % (self.message, self.detail)

class Controller:

    def __init__(self, app_name, app_key, hue_url):
        self.app_name = app_name
        self.app_key = app_key
        self.hue_url = hue_url

        self.init = False
        self.state = None

    # GET and POST
    def fetch(self, location = None, data = None):

        logging.debug('fetch: location = %s, data = %s' % (location, data))

        url = self.hue_url + '/api'

        if location:
            url += '/' + location

        post_data = None
        if data:
            post_data = json.dumps(data).encode('utf-8')

        result = urllib2.urlopen(url, post_data)

        output = ""
        for line in result:
            output += line

        reply = json.loads(output)

        logging.debug('reply = %s' % reply)

        return reply

    def get(self, location):
        return self.fetch(str(self.app_key) + '/' + location)

    # PUT
    def put(self, location, data):

        logging.debug('put: location = %s, data = %s' % (location, data))

        opener = urllib2.build_opener(urllib2.HTTPHandler)
        request = urllib2.Request(self.hue_url + '/' + location, 
                                  json.dumps(data).encode('utf-8'))
        request.add_header('Content-Type', 'application/json')
        request.get_method = lambda: 'PUT'

        result = opener.open(request)

        output = ""
        for line in result:
            output += line

        reply = json.loads(output)

        logging.debug('reply = %s' % reply)

        return reply

    def set_light(self, lamp, state):
        location = '/'.join(['api', str(self.app_key), 'lights', 
                             str(lamp), 'state'])
        return self.put(location, state)

    def debugstate(self):
        logging.debug('state: %s' % json.dumps(self.state, 
                                               sort_keys=True,
                                               indent=4, 
                                               separators=(',', ':')))

    def json_iserror(self, reply):
            if len(reply) != 1:
                return  False
            keys = reply[0].keys()
            if len(keys) != 1:
                return  False
            if keys[0] != "error":
                return  False

            return  True

    def register(self):
        logging.debug('registering application ...')

        # attempt a get with our key to see if we are already registered
        self.state = self.get('')
        if not self.json_iserror(self.state):
            self.debugstate()
            logging.debug('already registered')
            return

        app_register = { 'username': str(self.app_key), 
                         'devicetype': self.app_name 
                       }

        while True:
            reply = self.fetch(None, app_register)

            if not self.json_iserror(reply):
                break

            time.sleep(0.1)

        self.state = self.get('')
        self.debugstate()

        logging.debug('registered!')

        self.init = True

logging.basicConfig(level = logging.DEBUG)

# "hue" is bound in /etc/hosts to the ip address of my hue controller
#controller = Controller('huebert', 0xdeadbeef, "http://hue")
controller = Controller('huebert', 0xdeadbeef, "http://hue")

controller.register()

while True:
    light = random.randint(1, 3)
    hue = random.randint(0, 65535)
    sat = random.randint(0, 254)
    bri = random.randint(0, 254)

    controller.set_light(light, {"bri": bri, "hue": hue, "sat": sat, 
                             "on": True, "transitiontime": 10})
